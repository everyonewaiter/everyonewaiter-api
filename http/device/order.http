### 1. 주문 생성
< {%
  const deviceId = request.environment.get("devices.pos.id");
  const deviceName = request.environment.get("devices.pos.name");
  const devicePurpose = request.environment.get("devices.pos.purpose");
  const secretKey = request.environment.get("devices.pos.secretKey");

  const method = request.method;
  const uri = request.url
  .tryGetSubstituted()
  .split(request.environment.get("url"))[1];
  const timestamp = Date.now().toString();

  const signature = crypto.hmac.sha256()
  .withTextSecret(secretKey)
  .updateWithText(`${method} ${uri}\n`)
  .updateWithText(`${deviceId} ${devicePurpose} ${deviceName}\n`)
  .updateWithText(`${timestamp}`)
  .digest()
  .toBase64();

  request.variables.set("accessKey", deviceId);
  request.variables.set("signature", signature);
  request.variables.set("timestamp", timestamp);
%}

POST {{url}}/v1/orders
Content-Type: application/json
x-ew-access-key: {{accessKey}}
x-ew-signature: {{signature}}
x-ew-timestamp: {{timestamp}}

{
  "tableNo": 1,
  "memo": "",
  "orderMenus": [
    {
      "menuId": 720877060705463585,
      "quantity": 1,
      "menuOptionGroups": []
    },
    {
      "menuId": 720877103952931652,
      "quantity": 2,
      "menuOptionGroups": [
        {
          "menuOptionGroupId": 720877104015844743,
          "orderOptions": [
            {
              "name": "크림 스프",
              "price": 1000
            },
            {
              "name": "감자튀김",
              "price": 2000
            }
          ]
        }
      ]
    }
  ]
}

### 2. [홀 관리] 주문 목록 조회
< {%
  const deviceId = request.environment.get("devices.hall.id");
  const deviceName = request.environment.get("devices.hall.name");
  const devicePurpose = request.environment.get("devices.hall.purpose");
  const secretKey = request.environment.get("devices.hall.secretKey");

  const method = request.method;
  const uri = request.url
  .tryGetSubstituted()
  .split(request.environment.get("url"))[1];
  const timestamp = Date.now().toString();

  const signature = crypto.hmac.sha256()
  .withTextSecret(secretKey)
  .updateWithText(`${method} ${uri}\n`)
  .updateWithText(`${deviceId} ${devicePurpose} ${deviceName}\n`)
  .updateWithText(`${timestamp}`)
  .digest()
  .toBase64();

  request.variables.set("accessKey", deviceId);
  request.variables.set("signature", signature);
  request.variables.set("timestamp", timestamp);
%}

GET {{url}}/v1/orders/hall?served=false
Content-Type: application/json
x-ew-access-key: {{accessKey}}
x-ew-signature: {{signature}}
x-ew-timestamp: {{timestamp}}

### 3. [홀 관리] 주문 서빙
< {%
  const deviceId = request.environment.get("devices.hall.id");
  const deviceName = request.environment.get("devices.hall.name");
  const devicePurpose = request.environment.get("devices.hall.purpose");
  const secretKey = request.environment.get("devices.hall.secretKey");

  const method = request.method;
  const uri = request.url
  .tryGetSubstituted()
  .split(request.environment.get("url"))[1];
  const timestamp = Date.now().toString();

  const signature = crypto.hmac.sha256()
  .withTextSecret(secretKey)
  .updateWithText(`${method} ${uri}\n`)
  .updateWithText(`${deviceId} ${devicePurpose} ${deviceName}\n`)
  .updateWithText(`${timestamp}`)
  .digest()
  .toBase64();

  request.variables.set("accessKey", deviceId);
  request.variables.set("signature", signature);
  request.variables.set("timestamp", timestamp);
%}

POST {{url}}/v1/orders/722613598859389799/serving
Content-Type: application/json
x-ew-access-key: {{accessKey}}
x-ew-signature: {{signature}}
x-ew-timestamp: {{timestamp}}

### 4. [홀 관리] 주문 메뉴 서빙
< {%
  const deviceId = request.environment.get("devices.hall.id");
  const deviceName = request.environment.get("devices.hall.name");
  const devicePurpose = request.environment.get("devices.hall.purpose");
  const secretKey = request.environment.get("devices.hall.secretKey");

  const method = request.method;
  const uri = request.url
  .tryGetSubstituted()
  .split(request.environment.get("url"))[1];
  const timestamp = Date.now().toString();

  const signature = crypto.hmac.sha256()
  .withTextSecret(secretKey)
  .updateWithText(`${method} ${uri}\n`)
  .updateWithText(`${deviceId} ${devicePurpose} ${deviceName}\n`)
  .updateWithText(`${timestamp}`)
  .digest()
  .toBase64();

  request.variables.set("accessKey", deviceId);
  request.variables.set("signature", signature);
  request.variables.set("timestamp", timestamp);
%}

POST {{url}}/v1/orders/720884294758628965/menus/720884294783794262/serving
Content-Type: application/json
x-ew-access-key: {{accessKey}}
x-ew-signature: {{signature}}
x-ew-timestamp: {{timestamp}}

### 5. [홀 관리] 직원 호출 목록 조회
< {%
  const deviceId = request.environment.get("devices.hall.id");
  const deviceName = request.environment.get("devices.hall.name");
  const devicePurpose = request.environment.get("devices.hall.purpose");
  const secretKey = request.environment.get("devices.hall.secretKey");

  const method = request.method;
  const uri = request.url
  .tryGetSubstituted()
  .split(request.environment.get("url"))[1];
  const timestamp = Date.now().toString();

  const signature = crypto.hmac.sha256()
  .withTextSecret(secretKey)
  .updateWithText(`${method} ${uri}\n`)
  .updateWithText(`${deviceId} ${devicePurpose} ${deviceName}\n`)
  .updateWithText(`${timestamp}`)
  .digest()
  .toBase64();

  request.variables.set("accessKey", deviceId);
  request.variables.set("signature", signature);
  request.variables.set("timestamp", timestamp);
%}

GET {{url}}/v1/orders/staff-calls
Content-Type: application/json
x-ew-access-key: {{accessKey}}
x-ew-signature: {{signature}}
x-ew-timestamp: {{timestamp}}

### 6. [홀 관리] 직원 호출 완료
< {%
  const deviceId = request.environment.get("devices.hall.id");
  const deviceName = request.environment.get("devices.hall.name");
  const devicePurpose = request.environment.get("devices.hall.purpose");
  const secretKey = request.environment.get("devices.hall.secretKey");

  const method = request.method;
  const uri = request.url
  .tryGetSubstituted()
  .split(request.environment.get("url"))[1];
  const timestamp = Date.now().toString();

  const signature = crypto.hmac.sha256()
  .withTextSecret(secretKey)
  .updateWithText(`${method} ${uri}\n`)
  .updateWithText(`${deviceId} ${devicePurpose} ${deviceName}\n`)
  .updateWithText(`${timestamp}`)
  .digest()
  .toBase64();

  request.variables.set("accessKey", deviceId);
  request.variables.set("signature", signature);
  request.variables.set("timestamp", timestamp);
%}

POST {{url}}/v1/orders/staff-calls/722737002358372398/complete
Content-Type: application/json
x-ew-access-key: {{accessKey}}
x-ew-signature: {{signature}}
x-ew-timestamp: {{timestamp}}

### 7. [테이블] 직원 호출
< {%
  const deviceId = request.environment.get("devices.table.id");
  const deviceName = request.environment.get("devices.table.name");
  const devicePurpose = request.environment.get("devices.table.purpose");
  const secretKey = request.environment.get("devices.table.secretKey");

  const method = request.method;
  const uri = request.url
  .tryGetSubstituted()
  .split(request.environment.get("url"))[1];
  const timestamp = Date.now().toString();

  const signature = crypto.hmac.sha256()
  .withTextSecret(secretKey)
  .updateWithText(`${method} ${uri}\n`)
  .updateWithText(`${deviceId} ${devicePurpose} ${deviceName}\n`)
  .updateWithText(`${timestamp}`)
  .digest()
  .toBase64();

  request.variables.set("accessKey", deviceId);
  request.variables.set("signature", signature);
  request.variables.set("timestamp", timestamp);
%}

POST {{url}}/v1/orders/staff-calls
Content-Type: application/json
x-ew-access-key: {{accessKey}}
x-ew-signature: {{signature}}
x-ew-timestamp: {{timestamp}}

{
  "optionName": "직원 호출"
}
